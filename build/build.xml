<?xml version="1.0"?>
<!-- A build file for use by Ant to build HypeDyn. -->
<!-- Based on Kawa's ant file -->
<!-- Requires Ant 1.6.3 -->
<project name="HypeDyn" default="all" basedir=".">
  <description>
    HypeDyn
  </description>
	
  <!-- Give the user a chance to override the defaults. -->
  <property file="build.properties"/>
  
  <property name="version.release" value="2.2.0.258"/>
  <property name="version.local" value=""/>
  <property name="version" value="${version.release}${version.local}"/>
  
  <property name="kawa.dir"      value="/usr/local/share/java/"/>

  <property name="mac.javavm.framework"     value="/System/Library/Frameworks/JavaVM.framework/"/>

  <property name="src.dir"      value="${basedir}/../src/hypedyn/"/>
  <property name="temp.dir"    value="${basedir}/temp"/>
  <property name="build.dir"    value="${basedir}"/>
  <property name="dist.dir"     value="${basedir}/../bin/"/>
  
  <property name="shared.dir"	value="${build.dir}/shared/" />
  <property name="launcher.windows.dir" value="${build.dir}/windows/launcher" />
  <property name="launcher.linux.dir" value="${build.dir}/linux/launcher" />
  <property name="doc.dir"      value="${basedir}/../doc/" />
  <property name="appletlib.dir" value="${basedir}/../lib/" />
  <property name="mac.package.dir" value="${basedir}/macosx/" />

  <property name="editor-mainclass" value="${src.dir}/runhypedyn.scm"/>
  <property name="reader-mainclass" value="${src.dir}/htreader.scm"/>
  <property name="applet-mainclass" value="${src.dir}/htapplet.scm"/>

  <property name="base.kawa.jar" value="kawa.jar"/>
	
  <property name="base.hypedyn.jar" value="hypedyn.jar"/>
  <property name="base.htapplet.jar" value="htapplet.jar"/>
  <property name="base.htreader.jar" value="hypedyn-reader.jar"/>
  <property name="base.appletkawa.jar" value="kawa-applet.jar"/>
  
  <property name="build.hypedyn.jar"    value="${temp.dir}/${base.hypedyn.jar}"/>
  <property name="build.htreader.jar"    value="${temp.dir}/${base.htreader.jar}"/>
  <property name="build.htapplet.jar"    value="${temp.dir}/${base.htapplet.jar}"/>
  <property name="build.kawa.jar"    value="${kawa.dir}/${base.kawa.jar}"/>
	
  <condition property="windows"><os family="windows" /> </condition>
  
  	<condition property="linux">
  		<and>
  		  <os family="unix"/>
  		  <not>
  		    <os family="mac"/>
  	      </not>
  		</and>
  	  </condition>
  	
  	<condition property="macosx">
  		<and>
  		  <os family="mac"/>
  		  <not>
  		  	<istrue value="${linux}"/>
  	      </not>
  		</and>
  	  </condition>

  <!-- build files, to be cleaned -->
  <fileset id="build.classes" dir="${temp.dir}">
     <include name="*.class"/>
  </fileset>
  
  <!-- targets -->
  
  <!-- top most parent task -->
  <!-- <target name="all" depends="init, build, dist" /> --> 
  <target name="all" depends="init, editor" />
  
  <target name="editor" depends="build-editor, dist-editor" />
  <target name="reader" depends="build-reader, dist-reader" />
  <target name="applet" depends="build-applet, dist-applet" />
	
  <!-- build -->   
  <!-- <target name="build" depends="build-editor, build-reader, build-applet" /> -->

  <!-- dist -->
  <!-- <target name="dist" depends="dist-editor, dist-reader, dist-applet" /> -->
	
  <!-- note clean-dist and dist-common is only done once -->
  <target name="dist-editor" depends="dist-common, dist-editor-windows, dist-editor-linux, dist-editor-macosx" />
  <target name="dist-reader" depends="dist-reader-windows, dist-reader-linux, dist-reader-macosx" />
  <target name="dist-applet" depends="dist-applet-common" />
   
  <!-- INIT -->
  <target name="init">
  	
  	<!-- clean out the distribution folder for older files -->
  	<antcall target="clean-dist" />
  
  	<!-- set the properties that are os dependent -->
  	
    <condition property="dist.editor.package" value="${dist.dir}" > <!-- /HypeDyn.win" > -->
 		<istrue value="${windows}"/> 
    </condition>
 	
 	<condition property="dist.editor.package" value="${dist.dir}" > <!-- /HypeDyn.linux"> -->
 		<istrue value="${linux}"/> 
 	</condition>
     	
    <condition property="dist.editor.package" value="${dist.dir}/HypeDyn.app">
     	<istrue value="${macosx}"/> 
    </condition>
     	
    <condition property="build.httpserver.classpath" value="${java.home}/lib/rt.jar" >
 		<istrue value="${windows}"/> 
    </condition>
 	
    <condition property="build.httpserver.classpath" value="${java.home}/lib/rt.jar" >
 	<istrue value="${linux}"/> 
    </condition>
     	
     <condition property="build.httpserver.classpath" value="${mac.javavm.framework}/Classes/classes.jar" >
    	<istrue value="${macosx}"/> 
    </condition>
  	
  	<property name="dist.applet.package" value="${dist.dir}/HypeDyn-applet" />
  	 
     <!-- only used in macosx -->
 	<condition property="dist.reader.package" value="${dist.dir}/HypeDynReader.app">
 		<istrue value="${macosx}"/> 
     </condition>
 	
  	 <property name="src.editor.package"  value="${mac.package.dir}/HypeDyn_package.app"/>
 	 <property name="src.reader.package" value="${mac.package.dir}/HypeDynReader_package.app" />
	 <property name="src.reader.standalone.package" value="${mac.package.dir}/HypeDynReader-standalone_package.app" />
 	
 	<!-- only used in macosx -->
     <condition property="dist.editor.package.javadir" value="${dist.editor.package}/Contents/Resources/Java" >
     	<istrue value="${macosx}"/> 
     </condition>
 	<condition property="dist.reader.package.javadir" value="${dist.reader.package}/Contents/Resources/Java" >
 		<istrue value="${macosx}"/>
 	</condition>
 	
 	<condition property="dist.editor.package.javadir" value="${dist.editor.package}/Java">
 	    <or> 
 	    	<istrue value="${windows}"/>
 			<istrue value="${linux}"/>
 	   </or>
 	</condition>
  	
  	<!-- reader and editor in linux and windows just share the same Java folder -->
  	<condition property="dist.reader.package.javadir" value="${dist.editor.package}/Java">
  	 	    <or> 
  	 	    	<istrue value="${windows}"/>
  	 			<istrue value="${linux}"/>
  	 	   </or>
  	</condition>

   <condition property="dist.editor.package.appstub" value="${dist.editor.package}/Contents/MacOS/JavaApplicationStub" >
      <istrue value="${macosx}"/>
   </condition>
   <condition property="dist.reader.package.appstub" value="${dist.reader.package}/Contents/MacOS/JavaApplicationStub" >
      <istrue value="${macosx}"/>
   </condition>
  	
  	<!-- determine where to place export folder -->
  	<condition property="export.dir" value="${dist.editor.package.javadir}/export/" >
  		<istrue value="${macosx}"/>
  	</condition>
  	
  	<condition property="export.dir" value="${dist.editor.package}/export/" >
  		<or> 
  	 	    <istrue value="${windows}"/>
  	 		<istrue value="${linux}"/>
  	 	</or>
  	</condition>
  	
  <!-- show user the settings -->
    <echo>
        version=${version}
    	build.hypedyn.jar=${build.hypedyn.jar}
        temp.dir=${temp.dir}
    	build.httpserver.classpath=${build.httpserver.classpath}
    </echo>
  	
  <!-- set up directory structure -->
    <mkdir dir="${temp.dir}"/>
    <mkdir dir="${dist.dir}"/>
  </target>

  <!-- BUILD (os independent) -->

	<!-- test for common code -->
  <target name="build-editor" depends="">
  	
  	<antcall target="clean-build" />
  	<echo>
  		kawa location ${build.kawa.jar}
  	</echo>
	<java failonerror="true"
		classname="kawa.repl"
	    classpath="${build.kawa.jar};${appletlib.dir}/AppleJavaExtensions.jar;${build.httpserver.classpath}">
	    <arg line="-d ${temp.dir} --warn-invoke-unknown-method --warn-undefined-variable --main -C ${editor-mainclass}"/>
	</java>
	<!-- put into jar file -->
	<jar jarfile="${build.hypedyn.jar}"
	     basedir="${temp.dir}"
		 excludes="${base.hypedyn.jar}"
	     manifest="${build.dir}/manifest/Manifest.editor"/>
  </target>

  <target name="build-reader" >
  	
  	<antcall target="clean-build" />
  	
  	<java failonerror="true"
  		    classname="kawa.repl"
  	        classpath="${build.kawa.jar};${appletlib.dir}/AppleJavaExtensions.jar">
  	      <arg line="-d ${temp.dir} --warn-invoke-unknown-method --warn-undefined-variable --main -C ${reader-mainclass}"/>
  	    </java>
  		<!-- put into jar file -->
  		<jar jarfile="${build.htreader.jar}"
  	    	 basedir="${temp.dir}"
  			 excludes="${base.htreader.jar}"
  	    	 manifest="${build.dir}/manifest/Manifest.reader"/>
  </target>
	
  <target name="build-applet" >
  	
  	<antcall target="clean-build" />
  	
  	    <!-- use kawa-applet.jar instead of ${base.kawa.jar} to compile our applet -->
	    <java failonerror="true"
		    classname="kawa.repl"
	        classpath="${appletlib.dir}/${base.appletkawa.jar};${appletlib.dir}/AppleJavaExtensions.jar">
	      <arg line="-d ${temp.dir} --warn-invoke-unknown-method --warn-undefined-variable --applet -C ${applet-mainclass}"/>
	    </java>
		
		<!-- put into jar file -->
		<jar jarfile="${build.htapplet.jar}"
	    	 basedir="${temp.dir}"
			 excludes="${base.htapplet.jar}"
	    	 manifest="${build.dir}/manifest/empty.txt"/>
	</target>

  <!-- DISTTRIBUTE -->

<target name="assemble-export-lib" >
	
	<!-- copy whole of applet folder here -->
	<copy todir="${export.dir}">
  		<fileset dir="${dist.applet.package}"/>
  	</copy>
	<!-- copy windows standalone -->
	<copy file="${launcher.windows.dir}/hypedyn-reader-standalone.exe" tofile="${export.dir}/hypedyn-reader.exe"/>

	<!-- copy linux standalone -->
	<copy file="${launcher.linux.dir}/hypedyn-reader-standalone" tofile="${export.dir}/hypedyn-reader"/>

	<!-- copy mac standalone -->
	<copy todir="${export.dir}/HypeDynReader.app">
	  		<fileset dir="${mac.package.dir}/HypeDynReader-standalone_package.app"/>
	</copy>

	<!-- copy kawa.jar and hypedyn-reader.jar -->
	<copy file="${dist.editor.package.javadir}/kawa.jar" todir="${export.dir}"/>
	<copy file="${dist.reader.package.javadir}/hypedyn-reader.jar" todir="${export.dir}"/>
</target>
	
<target name="dist-common" >
	<!-- copy the help file -->
	<copy file="${doc.dir}/hypedyn-help.txt" todir="${dist.editor.package.javadir}"/>

	<!-- copy the examples and tutorials -->
	<copy todir="${dist.dir}/examples/">
	  	<fileset dir="${shared.dir}/examples"/>
	</copy>
	<!-- should the .pdf files be rebuilt from the .tex files? -->
	<copy todir="${dist.dir}/tutorials/">
	  	<fileset file="${doc.dir}/*.pdf"/>
	</copy>
	
</target>
 
  <!-- Distribute Editor Linux -->
	
  <target name="dist-editor-linux" if="linux">
	<echo>
		dist.editor.package=${dist.editor.package}
		${dist.editor.package}/hypedyn
	</echo>

	<!-- copy the executable -->
  	<copy file="${launcher.linux.dir}/hypedyn" todir="${dist.editor.package}" />
	<available property="present"
               file="${dist.editor.package}/hypedyn"
               />

	<echo>
		hypeydn file is present? ${present}
	</echo>

  	<chmod file="${dist.editor.package}/hypedyn" perm="a+x" />
  	      		
   	<!-- copy the jar files to the linux bundle -->
    	<copy file="${build.hypedyn.jar}" todir="${dist.editor.package.javadir}"/>
  	<copy file="${build.kawa.jar}" tofile="${dist.editor.package.javadir}/kawa.jar"/>
  	<!-- rename to kawa.jar -->
  	<!-- <move file="${dist.editor.package.javadir}/${base.kawa.jar}" tofile="${dist.editor.package.javadir}/kawa.jar" /> -->
	<copy file="${appletlib.dir}/AppleJavaExtensions.jar" todir="${dist.editor.package.javadir}" />

	<!-- copy the js and css files for export -->
	<copy todir="${dist.editor.package}/js">
	  	<fileset dir="${src.dir}/js"/>
	</copy>
	<copy todir="${dist.editor.package}/css">
	  	<fileset dir="${src.dir}/css"/>
	</copy>
  	
  </target>


	<!-- Distribute Editor Windows -->
	
  <target name="dist-editor-windows" if="windows">
  	
	<!-- copy the executable -->
  	<copy file="${launcher.windows.dir}/hypedyn.exe" todir="${dist.editor.package}" />
  		  	      		
   	<!-- copy the jar files to the windows bundle -->
    	<copy file="${build.hypedyn.jar}" todir="${dist.editor.package.javadir}"/>
   	<copy file="${build.kawa.jar}" tofile="${dist.editor.package.javadir}/kawa.jar"/>
	<!-- rename to kawa.jar -->
  	 <!-- <move file="${dist.editor.package.javadir}/${base.kawa.jar}" tofile="${dist.editor.package.javadir}/kawa.jar" /> -->
	<copy file="${appletlib.dir}/AppleJavaExtensions.jar" todir="${dist.editor.package.javadir}" />

	<!-- copy the js and css files for export -->
	<copy todir="${dist.editor.package}/js">
	  	<fileset dir="${src.dir}/js"/>
	</copy>
	<copy todir="${dist.editor.package}/css">
	  	<fileset dir="${src.dir}/css"/>
	</copy>
  	
  	<!-- copy the readme file -->
  	<copy file="${build.dir}/windows/README.txt" todir="${dist.editor.package}" />
  </target>
  		
  <!-- Distribute Editor Mac -->
	
  <target name="dist-editor-macosx" if="macosx">
  		  		  	      		
  	<!-- copy the jar files to the mac bundle -->
  	<copy file="${build.hypedyn.jar}" todir="${dist.editor.package.javadir}"/>
   	<copy file="${build.kawa.jar}" tofile="${dist.editor.package.javadir}/kawa.jar"/>
	<!-- rename to kawa.jar -->
  	<!-- <move file="${dist.editor.package.javadir}/${base.kawa.jar}" tofile="${dist.editor.package.javadir}/kawa.jar" /> -->
  	
  	<!-- copy the mac bundle skeleton -->
  	<copy todir="${dist.editor.package}">
  	   <fileset dir="${src.editor.package}"/>
  	</copy>
	<chmod file="${dist.editor.package.appstub}" perm="a+x"/>

	<!-- copy the js and css files for export -->
	<copy todir="${dist.editor.package.javadir}/js">
	  	<fileset dir="${src.dir}/js"/>
	</copy>
	<copy todir="${dist.editor.package.javadir}/css">
	  	<fileset dir="${src.dir}/css"/>
	</copy>

  	<!-- copy the readme file -->
  	<copy file="${build.dir}/macosx/README.txt" todir="${dist.dir}" />
  </target>
  	
	<!-- Distribute Reader Linux -->
	
  <target name="dist-reader-linux" if="linux" >
  	<copy file="${build.htreader.jar}" todir="${dist.editor.package.javadir}"/>
  	<copy file="${build.kawa.jar}" tofile="${dist.editor.package.javadir}/kawa.jar"/>
	<!-- rename to kawa.jar -->
  	<!-- <move file="${dist.editor.package.javadir}/${base.kawa.jar}" tofile="${dist.editor.package.javadir}/kawa.jar" /> -->
	<copy file="${appletlib.dir}/AppleJavaExtensions.jar" todir="${dist.editor.package.javadir}" />
  		
  	<copy file="${launcher.linux.dir}/hypedyn-reader" todir="${dist.editor.package}" />
	<chmod file="${dist.editor.package}/hypedyn-reader" perm="a+x"/>
  </target>
  	      	
	<!-- Distribute Reader Windows -->
	
  <target name="dist-reader-windows" if="windows" >
    <copy file="${build.htreader.jar}" todir="${dist.editor.package.javadir}"/>
  	<copy file="${build.kawa.jar}" tofile="${dist.editor.package.javadir}/kawa.jar"/>
	<!-- rename to kawa.jar -->
  	<!-- <move file="${dist.editor.package.javadir}/${base.kawa.jar}" tofile="${dist.editor.package.javadir}/kawa.jar" /> -->
	<copy file="${appletlib.dir}/AppleJavaExtensions.jar" todir="${dist.editor.package.javadir}" />
    	
  	<copy file="${launcher.windows.dir}/reader.exe" todir="${dist.editor.package}" />
  </target>
  	
	<!-- Distribute Reader Mac -->
	
  <target name="dist-reader-macosx" depends="" if="macosx" >
  	<!-- copy the jar files to the mac bundle -->
  	<copy file="${build.htreader.jar}" todir="${dist.reader.package.javadir}"/>
  	<copy file="${build.kawa.jar}" tofile="${dist.reader.package.javadir}/kawa.jar"/>
  	
  	<!-- rename to kawa.jar -->
  	<!-- <move file="${dist.reader.package.javadir}/${base.kawa.jar}" tofile="${dist.reader.package.javadir}/kawa.jar" /> -->
  	  	
  	<!-- copy the mac bundle skeleton -->
  	<copy todir="${dist.reader.package}">
  	   <fileset dir="${src.reader.package}"/>
  	</copy>
        <chmod file="${dist.reader.package.appstub}" perm="a+x"/>
  </target>
	
	<!-- Distribute Applet Common (not os dependent) -->
	<target name="dist-applet-common" >
		<copy file="${build.htapplet.jar}" todir="${dist.applet.package}" />
		<copy file="${appletlib.dir}/${base.appletkawa.jar}" todir="${dist.applet.package}" />
		<copy file="${appletlib.dir}/AppleJavaExtensions.jar" todir="${dist.applet.package}" />
		<copy file="${shared.dir}/htapplet.html" todir="${dist.applet.package}" />
		<copy file="${shared.dir}/story.dyn" todir="${dist.applet.package}" />
	</target>
  
  <!-- clean -->
  	  	
  <target name="clean-build">
  	 <delete>
  	    <fileset refid="build.classes"/>
  	 </delete>
  	 <delete dir="${temp.dir}"/>
  </target>

  <target name="clean-dist">
  	  <delete dir="${dist.dir}"/>
  </target>

  <target name="clean" depends="clean-build,clean-dist"/>		
	
</project>
